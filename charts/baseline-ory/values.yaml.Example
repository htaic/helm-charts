fullnameOverride: "baseline"
enableTraefikDashboard: true

storage:
  className: efs-storageclass
  storageName: efs-shared-storage
  provisioner: efs.csi.aws.com
  capacity: 20Gi
  volumeMode: Filesystem
  csi:
    volumeHandle: fs-123456
    volumeAttributes:
      encryptInTransit: "true"
      
# https://github.com/kubernetes-sigs/aws-efs-csi-driver/blob/master/charts/aws-efs-csi-driver/values.yaml
aws-efs-csi-driver:
  controller:
    serviceAccount:
      create: true
      name: efs-csi-controller-sa
      annotations: 
        eks.amazonaws.com/role-arn: arn:aws:iam::YOURACCOUNTNUMBER:role/YOUR
  storageClasses:
  - name: efs-storageclass
    mountOptions:
    - tls
    parameters:
      provisioningMode: efs-ap
      fileSystemId: fs-123456


# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
traefik:
  image:
    pullPolicy: Always

# https://github.com/htaic/helm-charts/charts/microfrontend/values.yaml.example
microfrontend:
  namespace: "hanwha"
  fullnameOverride: authmanager
  image:
    replicaCount: 1
    repository: ghcr.io/htaic/authmanager
    pullPolicy: Always
    containerPort: 3002
    tag: "latest"
    hostname: authmanager
    domainPath: "login"
  sidecarimage:
    name: "logging-sidecar"
    repository: ghcr.io/htaic/platform-logging-service
    pullPolicy: Always
    tag: "latest"    
  imagePullSecrets:
    - name: dockerconfigjson-github-com
  service:
    type: ClusterIP
  resources:
    requests:
      cpu: 250m
      memory: 750Mi
  serviceAccount:
    create: false
    annotations: {}
    name: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80


# https://github.com/htaic/helm-charts/charts/auth-service/values.yaml
auth-service:
  image:
    replicaCount: 1
    repository: ghcr.io/htaic/auth-service
    pullPolicy: Always
    containerPort: 3000
    tag: "latest"
    hostname: auth
    domainPath: "auth"
    env:
      - name: DATABASE_HOST
        value: baseline-postgresql
      - name: DATABASE_USER
        value: postgres
      - name: DATABASE_PASSWORD
        value: postgrespassword
      - name: DATABASE_NAME
        value: auth
      - name: ORY_KRATOS_BASE_ADMIN_URL
        value: http://baseline-kratos-admin
      - name: ORY_KRATOS_BASE_PUBLIC_URL
        value: http://baseline-kratos-public
  sidecarimage:
    name: "logging-sidecar"
    repository: ghcr.io/htaic/platform-logging-service
    pullPolicy: Always
    tag: "latest"
  imagePullSecrets:
    - name: dockerconfigjson-github-com
  service:
    type: ClusterIP
  resources:
    requests:
      cpu: 250m
      memory: 750Mi
  serviceAccount:
    create: false
    annotations: {}
    name: ""
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  postgresql:
    namespace: "hanwha"
    postgres:
      env:
        - name: POSTGRES_PASSWORD
          value: postgrespassword
    # To enable EFS on the cluster, use the following values in the root helm chart
    storage:
      className: efs-storageclass
      claimName: postgres-claim
      claimSize: 5Gi
  oathkeeper:
    demo: false
    maester:
      enabled: false
    oathkeeper:
      config:
        log:
          leak_sensitive_values: false
        authenticators:
          cookie_session:
            enabled: true
            config:
              check_session_url: http://baseline-kratos-public/sessions/whoami
              preserve_path: true
              preserve_query: true
              force_method: GET
              extra_from: "@this"
              subject_from: "identity.id"
        authorizers:
          allow:
            enabled: true
          deny:
            enabled: true
          remote_json:
            enabled: true
            config:
              remote: http://baseline-keto-read/check
              forward_response_headers_to_upstream: []
              payload: |
                {
                  "namespace": "{{ printIndex .MatchContext.RegexpCaptureGroups 1 }}",
                  "object": "{{ printIndex .MatchContext.RegexpCaptureGroups 2 }}",
                  "relation": "{{ print .MatchContext.Method }}",
                  "subject_id": "{{ print .Subject }}"
                }
        mutators:
          noop:
            enabled: true
          header:
            enabled: true
            config:
              headers:
                x-identity: "{{ print .Subject }}"
      accessRules: |
        [
          {
            "id": "allow-authenticated-with-kratos",
            "match": {
              "url": "https://<[^/]+>/<devices>/<[[:digit:]]+>",
              "methods": [
                "GET",
                "POST"
              ]
            },
            "authenticators": [{
                "handler": "cookie_session"
            }],
            "authorizer": {
              "handler": "remote_json"
            },
            "mutators": [{
              "handler": "header"
            }]
          }
        ]

  kratos:
    autoscaling:
      enabled: false
    kratos:
      automigration:
        enabled: true
        customCommand:
          - kratos
        customArgs:
          - "migrate"
          - "sql"
          - "-e"
          - "--yes"
          - "--config"
          - "/etc/config/kratos.yaml"
      identitySchemas:
        "identity.with.role.schema.json": |
          {
            "$id": "https://schemas.ory.sh/presets/kratos/identity.email.schema.json",
            "$schema": "http://json-schema.org/draft-07/schema#",
            "title": "Person",
            "type": "object",
            "properties": {
                "metadata_public": {
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "traits": {
                  "type": "object",
                  "properties": {
                      "email": {
                        "type": "string",
                        "format": "email",
                        "title": "E-Mail",
                        "ory.sh/kratos": {
                            "credentials": {
                              "password": {
                                  "identifier": true
                              }
                            },
                            "recovery": {
                              "via": "email"
                            },
                            "verification": {
                              "via": "email"
                            }
                        }
                      }
                  },
                  "required": [
                      "email"
                  ],
                  "additionalProperties": false
                }
            }
          }
      jsonnets:
        "oidc.microsoft.jsonnet": |
          local claims = {
            roles: 'user'
          } + std.extVar('claims');
          local roles = std.extVar('groups');
          local arrayToString(arr) = std.join(", ", std.map(std.escapeStringJson, arr));
          {
            identity: {
              metadata_public: {
                // Allowing unverified email addresses enables account
                // enumeration attacks, especially if the value is used for
                // e.g. verification or as a password login identifier.
                //
                // If connecting only to your organization (one tenant), claims.email is safe to use if you have not actively disabled e-mail verification during signup.
                //
                // The email might be empty if the account is not linked to an email address.
                // For a human readable identifier, consider using the "preferred_username" claim.
                [if "preferred_username" in claims then "email" else null]: claims.preferred_username,
                role: claims.roles 
                //arrayToString(roles)
              }
            }
          }
      config:
        dsn: "postgres://postgres:postgrespassword@baseline-postgresql:5432/ory?sslmode=disable&max_conn_lifetime=10s"
        selfservice:
          default_browser_return_url: https://ui.domain.com
          methods:
            password:
              enabled: true
        log:
          level: info
          leak_sensitive_values: false
        secrets:
          default:
            - EnCrYpTiOnSeCrEtUPDATEME
        hashers:
          argon2:
            parallelism: 1
            memory: 128MB
            iterations: 2
            salt_length: 16
            key_length: 16
        identity:
          default_schema_id: with_role
          schemas:
            - id: with_role
              url: file:///etc/config/identity.with.role.schema.json
        courier:
          smtp:
            connection_uri: smtps://test:test@mailslurper:1025/?skip_ssl_verify=true
  keto:
    keto:
      automigration: 
        enabled: true
        customCommand:
          - keto
      config:
        namespaces:
          - id: 0
            name: devices
        dsn: "postgres://postgres:postgrespassword@baseline-postgresql:5432/ory?sslmode=disable&max_conn_lifetime=10s"
      log:
        leak_sensitive_values: false