apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include ".helm.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include ".helm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include ".helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        date: "{{ now | unixEpoch }}"
        {{- include ".helm.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      hostname: {{ .Values.hostname }}
      serviceAccountName: {{ include ".helm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.postgresProvisioner }}
      initContainers:
        - name: {{ .Chart.Name }}-postgres-provisioner
          {{- if hasKey .Values.postgresProvisioner "tag" }}
          image: {{ .Values.postgresProvisioner.image }}:{{ .Values.postgresProvisioner.tag }}
          {{ else }}
          image: {{ .Values.postgresProvisioner.image }}:latest
          {{ end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['sh', '-c', '/home/developer/executecommands.sh']
          envFrom:
            - secretRef:
                name: "baseline-postgresql-secret"
            - secretRef:
                name: "hasura-postgresql-secret"
            - configMapRef:
                name: "baseline-configmap"
            - configMapRef:
                name: "duclo-configmap"
            - configMapRef:
                name: "aws-account-configmap"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - secretRef:
                name: "hasura-secret"
            - secretRef:
                name: "graphql-auth-secret" 
            - configMapRef:
                name: "duclo-configmap"
            - configMapRef:
                name: "aws-account-configmap"               
          env: 
            {{- if or (eq .Values.image.env ) }}
            - name: HASURA_GRAPHQL_DEV_MODE
              value: "false"
            - name: HASURA_GRAPHQL_ENABLE_CONSOLE
              value: "false"
            {{- end }}
            - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
              value: "startup, http-log, webhook-log, websocket-log, query-log"
              # We have a readonly role for all users other than Hasura GraphQL admin
            - name: HASURA_GRAPHQL_AUTH_HOOK
              value: http://anaheim-graphql-service-anaheim-authentication-service:9876/api/v1/graphqlHook
              # This sends a POST to the graphqlHook, along with the GraphQL query/mutation and variables.
              # We use that to validate the query/mutations against the Hanwha approved query/mutation list
              # as well as validate the orgId value if used in the query/mutation.
            - name: HASURA_GRAPHQL_AUTH_HOOK_MODE
              value: POST
            # - name: HASURA_GRAPHQL_ENABLE_CONSOLE
            #   value: "true"
            # - name: HASURA_GRAPHQL_DEV_MODE
            #   value: "true"
            - name: DD_APM_ENABLED
              value: "false"           
            - name: AUTHENTICATION_HOSTNAME
              value: http://anaheim-graphql-service-anaheim-authentication-service:9876
            - name: EVENTBRIDGE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: "graphql-auth-secret"
                  key: AWS_EVENTBRIDGE_HOSTNAME          
          # {{- if .Values.image.env }}
          # env: 
          #   {{- toYaml .Values.image.env | nindent 12 }}
          # {{- end }}
          args: [ {{.Values.image.args}} ]
          ports:
            - name: http
              containerPort: {{ .Values.image.containerPort }}
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}    
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
