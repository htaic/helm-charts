namespace: "hanwha"
domainPath: "hasura"
replicaCount: 1
postgresProvisioner:
  image: ghcr.io/htaic/anaheim-graphql-postgres-provisioner
# these are in baselines now
# databaseName: graphql
# databaseUser: YOUR_HASURA_USER
# databasePassword: YOUR_HASURA_PASSWORD
# databaseHost: YOUR_POSTGRES_HOST

# authServiceCookieOptionsDomain: YOUR_K8S_DOMAIN
# hasuraToken: YOUR_ADMIN_SECRET

image:
  repository: hasura/graphql-engine
  tag: v2.27.0
  pullPolicy: Always
  containerPort: 8080
  hostname: hasura
  env:
    - name: ENVIRONMENT
      value: ""  
    - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
      value: startup, http-log, webhook-log, websocket-log, query-log
      # We have a readonly role for all users other than Hasura GraphQL admin
    - name: HASURA_GRAPHQL_AUTH_HOOK
      value: http://anaheim-graphql-service-anaheim-authentication-service:9876/api/v1/graphqlHook
      # This sends a POST to the graphqlHook, along with the GraphQL query/mutation and variables.
      # We use that to validate the query/mutations against the Hanwha approved query/mutation list
      # as well as validate the orgId value if used in the query/mutation.
    - name: HASURA_GRAPHQL_AUTH_HOOK_MODE
      value: POST
    - name: AUTHENTICATION_HOSTNAME
      value: http://anaheim-graphql-service-anaheim-authentication-service:9876

imagePullSecrets:
  - name: dockerconfigjson-github-com

service:
  type: ClusterIP

resources:
  requests:
    cpu: 100m
    memory: 250Mi

serviceAccount:
  create: true
  annotations: {}
  name: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

environments:
  wprod:
    projectenv: wprod
  wqa:
    projectenv: wqa
  wrelqa:
    projectenv: wrelqa 
  wdev:
    projectenv: wdev
  wci: 
    projectenv: wci

global:
  environment: production 
